{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, PASSWORD_RESET_SUCCESS, PASSWORD_RESET_FAIL, PASSWORD_RESET_CONFIRM_SUCCESS, PASSWORD_RESET_CONFIRM_FAIL, SIGNUP_SUCCESS, SIGNUP_FAIL, ACTIVATION_SUCCESS, ACTIVATION_FAIL, GOOGLE_AUTH_SUCCESS, GOOGLE_AUTH_FAIL, LOGOUT } from './types';\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const googleAuthenticate = (state, code) => async dispatch => {\n  if (state && code && !localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    const details = {\n      'state': state,\n      'code': code\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`, config);\n      dispatch({\n        type: GOOGLE_AUTH_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n    } catch (err) {\n      dispatch({\n        type: GOOGLE_AUTH_FAIL\n      });\n    }\n  }\n};\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem('access')\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n\n      if (res.data.code !== 'token_not_valid') {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password,\n    re_password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n  }\n};\nexport const verify = (uid, token) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n    dispatch({\n      type: ACTIVATION_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n  }\n};\nexport const reset_password = email => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_FAIL\n    });\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/aravind/Desktop/pipeline/kyvor/front/src/actions/auth.js"],"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_FAIL","PASSWORD_RESET_CONFIRM_SUCCESS","PASSWORD_RESET_CONFIRM_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","GOOGLE_AUTH_SUCCESS","GOOGLE_AUTH_FAIL","LOGOUT","load_user","dispatch","localStorage","getItem","config","headers","res","get","process","env","REACT_APP_API_URL","type","payload","data","err","googleAuthenticate","state","code","details","formBody","Object","keys","map","key","encodeURIComponent","join","post","checkAuthenticated","body","JSON","stringify","token","login","email","password","signup","first_name","last_name","re_password","verify","uid","reset_password","reset_password_confirm","new_password","re_new_password","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n    PASSWORD_RESET_SUCCESS,\n    PASSWORD_RESET_FAIL,\n    PASSWORD_RESET_CONFIRM_SUCCESS,\n    PASSWORD_RESET_CONFIRM_FAIL,\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    ACTIVATION_SUCCESS,\n    ACTIVATION_FAIL,\n    GOOGLE_AUTH_SUCCESS,\n    GOOGLE_AUTH_FAIL,\n  \n    LOGOUT\n} from './types';\n\nexport const load_user = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\n                'Accept': 'application/json'\n            }\n        }; \n\n        try {\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n    \n            dispatch({\n                type: USER_LOADED_SUCCESS,\n                payload: res.data\n            });\n        } catch (err) {\n            dispatch({\n                type: USER_LOADED_FAIL\n            });\n        }\n    } else {\n        dispatch({\n            type: USER_LOADED_FAIL\n        });\n    }\n};\n\nexport const googleAuthenticate = (state, code) => async dispatch => {\n    if (state && code && !localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        };\n\n        const details = {\n            'state': state,\n            'code': code\n        };\n\n        const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`, config);\n\n            dispatch({\n                type: GOOGLE_AUTH_SUCCESS,\n                payload: res.data\n            });\n\n            dispatch(load_user());\n        } catch (err) {\n            dispatch({\n                type: GOOGLE_AUTH_FAIL\n            });\n        }\n    }\n};\n\n\nexport const checkAuthenticated = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }; \n\n        const body = JSON.stringify({ token: localStorage.getItem('access') });\n\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\n\n            if (res.data.code !== 'token_not_valid') {\n                dispatch({\n                    type: AUTHENTICATED_SUCCESS\n                });\n            } else {\n                dispatch({\n                    type: AUTHENTICATED_FAIL\n                });\n            }\n        } catch (err) {\n            dispatch({\n                type: AUTHENTICATED_FAIL\n            });\n        }\n\n    } else {\n        dispatch({\n            type: AUTHENTICATED_FAIL\n        });\n    }\n};\n\nexport const login = (email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email, password });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(load_user());\n    } catch (err) {\n        dispatch({\n            type: LOGIN_FAIL\n        })\n    }\n};\n\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ first_name, last_name, email, password, re_password });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n\n        dispatch({\n            type: SIGNUP_SUCCESS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: SIGNUP_FAIL\n        })\n    }\n};\n\nexport const verify = (uid, token) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ uid, token });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n\n        dispatch({\n            type: ACTIVATION_SUCCESS,\n        });\n    } catch (err) {\n        dispatch({\n            type: ACTIVATION_FAIL\n        })\n    }\n};\n\nexport const reset_password = (email) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n\n        dispatch({\n            type: PASSWORD_RESET_SUCCESS\n        });\n    } catch (err) {\n        dispatch({\n            type: PASSWORD_RESET_FAIL\n        });\n    }\n};\n\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n\n        dispatch({\n            type: PASSWORD_RESET_CONFIRM_SUCCESS\n        });\n    } catch (err) {\n        dispatch({\n            type: PASSWORD_RESET_CONFIRM_FAIL\n        });\n    }\n};\n\nexport const logout = () => dispatch => {\n    dispatch({\n        type: LOGOUT\n    });\n};"]},"metadata":{},"sourceType":"module"}